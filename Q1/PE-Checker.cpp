#include <windows.h>
#include <iostream>
#include <string>
using namespace std;
string getFile();
int main()
{
    string filePath = getFile();

    HANDLE hFile = CreateFileA(filePath.c_str(), GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE)
    {
        cout << "Failed to open the file. Error code: " << GetLastError() << endl;
    }

    HANDLE hMapping = CreateFileMapping(hFile, NULL, PAGE_READONLY, 0, 0, NULL);
    if (hMapping == NULL)
    {
        cout << "Failed to create file mapping. Error code: " << GetLastError() << endl;
        CloseHandle(hFile);
    }

    LPVOID baseAddress = MapViewOfFile(hMapping, FILE_MAP_READ, 0, 0, 0);
    if (baseAddress == NULL)
    {
        cout << "Failed to map view of file. Error code: " << GetLastError() << endl;
        CloseHandle(hMapping);
        CloseHandle(hFile);
    }

    PIMAGE_DOS_HEADER dosHeader = reinterpret_cast<PIMAGE_DOS_HEADER>(baseAddress);
    PIMAGE_NT_HEADERS ntHeaders = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<DWORD_PTR>(baseAddress) + dosHeader->e_lfanew);

    if (ntHeaders->Signature != IMAGE_NT_SIGNATURE)
    {
        cout << "Invalid PE file." << endl;
        UnmapViewOfFile(baseAddress);
        CloseHandle(hMapping);
        CloseHandle(hFile);
    }
    cout << "MZ DOS Signature: " << hex << toupper(dosHeader->e_magic) << endl;
    cout << "PE Signature: " << hex << ntHeaders->Signature << endl;

    cout << "Number of Sections: " << ntHeaders->FileHeader.NumberOfSections << endl;
    cout << "Time Date Stamp: " << hex << ntHeaders->FileHeader.TimeDateStamp << endl;
    cout << "Pointer to Symbol Table: " << hex << ntHeaders->FileHeader.PointerToSymbolTable << endl;
    cout << "Number of Symbols: " << hex << ntHeaders->FileHeader.NumberOfSymbols << endl;
    cout << "Size Of Optional Header: " << hex << ntHeaders->FileHeader.SizeOfOptionalHeader << endl;
    cout << "Characteristics: " << hex << ntHeaders->FileHeader.Characteristics << endl;

    cout << "Address Of EntryPoint: " << hex << ntHeaders->OptionalHeader.AddressOfEntryPoint << endl;
    cout << "Image Base Address: " << hex << ntHeaders->OptionalHeader.ImageBase<< endl;
    // You can access other header fields as needed (e.g., OptionalHeader, FileHeader, etc.)

    UnmapViewOfFile(baseAddress);
    CloseHandle(hMapping);
    CloseHandle(hFile);
}
string getFile()
{

    string filePath;

    cout << "Enter file path to check: ";
    getline(cin, filePath);

    return filePath;
}