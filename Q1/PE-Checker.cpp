#include <windows.h>
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;
void getFile(string &pFile);
void handleFile(string &pFile, HANDLE &hFile);
void handleMaping(HANDLE &hFile, HANDLE &hMapping);
void mapViewOfFile(HANDLE &hFile, HANDLE &hMapping, LPVOID &baseAddress);
void printInfo (PIMAGE_NT_HEADERS &ntHeaders);
void printInfo (PIMAGE_NT_HEADERS32 &ntHeaders);
int main()
{
    //Enter File's path 
    string filePath;
    getFile(filePath);

    //Open File to read
    HANDLE hFile;
    handleFile(filePath, hFile);

    //Open a existed file mapping object for a specified file
    HANDLE hMapping;
    handleMaping(hFile,hMapping);

    //Maps a view of a file mapping into the address space of a calling process
    LPVOID baseAddress;
    mapViewOfFile(hFile, hMapping, baseAddress);

    //DOS MZ
    PIMAGE_DOS_HEADER dosHeader = reinterpret_cast<PIMAGE_DOS_HEADER>(baseAddress);
    //PE Header
    PIMAGE_NT_HEADERS ntHeaders = reinterpret_cast<PIMAGE_NT_HEADERS>(reinterpret_cast<DWORD_PTR>(baseAddress) + dosHeader->e_lfanew);
    PIMAGE_NT_HEADERS32 ntHeader32 = reinterpret_cast<PIMAGE_NT_HEADERS32>(reinterpret_cast<DWORD_PTR>(baseAddress) + dosHeader->e_lfanew);
    //Check if is a PE or not
    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE)
    {
        cout << "Invalid PE file." << endl;
        UnmapViewOfFile(baseAddress);
        CloseHandle(hMapping);
        CloseHandle(hFile);
    }else if (ntHeaders->OptionalHeader.Magic == IMAGE_NT_OPTIONAL_HDR64_MAGIC )
    {
    printInfo(ntHeaders);
    }else{    
    printInfo(ntHeader32);

    UnmapViewOfFile(baseAddress);
    CloseHandle(hMapping);
    CloseHandle(hFile);
    }
}
void getFile(string &pFile)
{

    cout << "Enter file path to check: ";
    getline(cin, pFile);
}
void handleFile(string &pFile, HANDLE &hFile){
    
    //https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea
    hFile = CreateFileA(pFile.c_str(), GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (hFile == INVALID_HANDLE_VALUE)
    {
        cout << "Failed to open the file. Error code: " << GetLastError() << endl;
    }
}

void handleMaping(HANDLE &hFile, HANDLE &hMapping){

    //https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createfilemappinga
    hMapping = CreateFileMapping(hFile, NULL, PAGE_READONLY, 0, 0, NULL);
    if (hMapping == NULL)
    {
        cout << "Failed to create file mapping. Error code: " << GetLastError() << endl;
        CloseHandle(hFile);
    }
}
void mapViewOfFile(HANDLE &hFile, HANDLE &hMapping, LPVOID &baseAddress){

    //https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-mapviewoffile
    baseAddress = MapViewOfFile(hMapping, FILE_MAP_READ, 0, 0, 0);
    if (baseAddress == NULL)
    {
        cout << "Failed to map view of file. Error code: " << GetLastError() << endl;
        CloseHandle(hMapping);
        CloseHandle(hFile);
    }
}
void printInfo (PIMAGE_NT_HEADERS &ntHeaders){

    cout << "-----------------------------PE Headr-----------------------------" << endl;
    cout << "PE Signature: " << hex << ntHeaders->Signature << endl;
    cout << "Number of Sections: " << ntHeaders->FileHeader.NumberOfSections << endl;
    cout << "Time Date Stamp: " << hex << ntHeaders->FileHeader.TimeDateStamp << endl;
    cout << "Pointer to Symbol Table: " << hex << ntHeaders->FileHeader.PointerToSymbolTable << endl;
    cout << "Number of Symbols: " << hex << ntHeaders->FileHeader.NumberOfSymbols << endl;
    cout << "Size Of Optional Header: " << hex << ntHeaders->FileHeader.SizeOfOptionalHeader << endl;
    cout << "Characteristics: " << hex << ntHeaders->FileHeader.Characteristics << endl;

    cout << "-----------------------------Optional Headr-----------------------------" << endl;
    cout << "Address Of EntryPoint: " << hex << ntHeaders->OptionalHeader.Magic << endl;
    cout << "Address Of EntryPoint: " << hex << ntHeaders->OptionalHeader.AddressOfEntryPoint << endl;
    cout << "Image Base Address: " << hex <<ntHeaders->OptionalHeader.ImageBase<< endl;
    cout << "Section Alignment: " << hex <<ntHeaders->OptionalHeader.SectionAlignment<< endl;
    cout << "File Alignment: " << hex <<ntHeaders->OptionalHeader.FileAlignment<< endl;
    cout << "Size of Image: " << hex <<ntHeaders->OptionalHeader.SizeOfImage<< endl;
    cout << "Size of Headers: " << hex <<ntHeaders->OptionalHeader.SizeOfHeaders<< endl;
    cout << "Number of Data Directory: " << hex <<ntHeaders->OptionalHeader.NumberOfRvaAndSizes<< endl;   
}
void printInfo (PIMAGE_NT_HEADERS32 &ntHeaders32){

    cout << "-----------------------------PE Headr-----------------------------" << endl;
    cout << "PE Signature: " << hex << ntHeaders32->Signature << endl;
    cout << "Number of Sections: " << ntHeaders32->FileHeader.NumberOfSections << endl;
    cout << "Time Date Stamp: " << hex << ntHeaders32->FileHeader.TimeDateStamp << endl;
    cout << "Pointer to Symbol Table: " << hex << ntHeaders32->FileHeader.PointerToSymbolTable << endl;
    cout << "Number of Symbols: " << hex << ntHeaders32->FileHeader.NumberOfSymbols << endl;
    cout << "Size Of Optional Header: " << hex << ntHeaders32->FileHeader.SizeOfOptionalHeader << endl;
    cout << "Characteristics: " << hex << ntHeaders32->FileHeader.Characteristics << endl;

    cout << "-----------------------------Optional Headr-----------------------------" << endl;
    cout << "Address Of EntryPoint: " << hex << ntHeaders32->OptionalHeader.Magic << endl;
    cout << "Address Of EntryPoint: " << hex << ntHeaders32->OptionalHeader.AddressOfEntryPoint << endl;
    cout << "Image Base Address: " << hex <<ntHeaders32->OptionalHeader.ImageBase<< endl;
    cout << "Section Alignment: " << hex <<ntHeaders32->OptionalHeader.SectionAlignment<< endl;
    cout << "File Alignment: " << hex <<ntHeaders32->OptionalHeader.FileAlignment<< endl;
    cout << "Size of Image: " << hex <<ntHeaders32->OptionalHeader.SizeOfImage<< endl;
    cout << "Size of Headers: " << hex <<ntHeaders32->OptionalHeader.SizeOfHeaders<< endl;
    cout << "Number of Data Directory: " << hex <<ntHeaders32->OptionalHeader.NumberOfRvaAndSizes<< endl;   
}